image: node:22

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  IMAGE_LATEST: $CI_REGISTRY_IMAGE:latest

# Global cache settings for all jobs: the install job loads the cache and all
# other jobs can only use it.
cache:
  - &dependencies
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull

stages:
  - Lint
  - Build
  - Release
  - Deploy

NPM:
  stage: .pre
  rules:
    - if: $CI_COMMIT_BRANCH != "master"
  before_script:
    - node -v
    - npm -v
  script:
    - npm ci --cache .npm --prefer-offline --no-progress
  cache:
    # Mimic &dependencies config but override policy to allow this job to update
    # the cache at the end of the job and only update if it was a successful job.
    - <<: *dependencies
      when: on_success
      policy: pull-push
    # Store npm cache for all branches (stores download pkg.tar.gz's)
    - key: ${CI_JOB_NAME}
      paths:
        - .npm/
      when: on_success
      policy: pull-push

ESLint:
  stage: Lint
  rules:
    - if: $CI_COMMIT_BRANCH != "master"
  allow_failure: true
  script:
    - npm run lint

Docker image:
  stage: Build
  image: docker:cli
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f Dockerfile .
    - docker push $IMAGE_TAG

Semantic Release:
  stage: Release
  cache: {}
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG == null
      when: manual
  before_script:
    - apk --no-cache add git
    - npm install --global semantic-release @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/git @semantic-release/gitlab
  script:
    - semantic-release

Tag latest image:
  stage: Release
  image: docker:cli
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG != null
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" $CI_REGISTRY
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $IMAGE_LATEST
    - docker push $IMAGE_LATEST

VPS:
  image: alpine:latest
  stage: Deploy
  rules:
    - when: manual
  needs: ['Docker image']
  variables:
    CONTAINER_NAME: my-app-name
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk add --no-cache openssh )'
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - |
      ssh -p $SSH_PORT "$SSH_USER@$SSH_HOST" "
        set -e
        cd $WORK_DIR
        docker login -u '$CI_REGISTRY_USER' -p '$CI_JOB_TOKEN' $CI_REGISTRY
        docker pull $IMAGE_TAG
        docker stop $CONTAINER_NAME
        docker rm $CONTAINER_NAME
        docker run -d --name $CONTAINER_NAME $IMAGE_TAG
      "
